generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  socialMedias  SocialMedia[]
  affiliateLink AffiliateLink[]
}

model SocialMedia {
  link   String          @unique
  type   SocialMediaType
  userId String
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AffiliateLink {
  id                String  @id @default(cuid())
  userId            String
  link              String
  createdAt         DateTime @default(now())
  clicks            Int     @default(0)
  orders            Int     @default(0)
  earned            Float   @default(0)
  productId         String
  product           Product @relation(fields: [productId], references: [id])
  content           String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model Product {
  id          String  @id @default(cuid())
  tittle      String
  description String
  link        String
  brandName   String
  brand       Brand  @relation(fields: [brandName], references: [name], onDelete: Cascade)
  affiliateLinks AffiliateLink[]
}

model Brand {
  name        String  @unique
  commission  Float
  products    Product[]
}

enum SocialMediaType {
  TIKTOK
  INSTAGRAM
}
