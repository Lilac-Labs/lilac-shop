generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String          @id @default(cuid())
  userName       String?         @unique
  name           String?
  firstName      String?
  lastName       String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  accounts       Account[]
  sessions       Session[]
  socialMedias   SocialMedia[]
  affiliateLinks AffiliateLink[]
}

model SocialMedia {
  link         String          @unique
  sessionToken String          @unique
  expires      DateTime
  type         SocialMediaType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AffiliateLink {
  id          Int     @id
  userId      String
  title       String
  description String?
  image       String
  brandName   String
  brand       Brand   @relation(fields: [brandName], references: [name], onDelete: Cascade)
  content     String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Brand {
  name           String          @unique
  commission     Float
  affiliateLinks AffiliateLink[]
}

enum SocialMediaType {
  TIKTOK
  INSTAGRAM
}
