generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userProfile   UserProfile?
}

model UserProfile {
  userName        String          @id @unique
  firstName       String          @default("")
  lastName        String          @default("")
  bio             String          @default("")
  image           String
  uuid            String          @unique
  collectionOrder Int[]           @default([])
  affiliateLinks  AffiliateLink[]
  collections     Collection[]
  socialMedias    SocialMedia[]
  user            User            @relation(fields: [uuid], references: [id], onDelete: Cascade)

  @@unique([userName, uuid])
}

model SocialMedia {
  link         String          @unique
  sessionToken String          @unique
  expires      DateTime
  type         SocialMediaType
  uuid         String
  userProfile  UserProfile     @relation(fields: [uuid], references: [uuid], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AffiliateLink {
  id           Int         @id
  uuid         String
  title        String
  description  String?
  image        String
  brandName    String
  collectionId Int?
  brand        Brand       @relation(fields: [brandName], references: [name], onDelete: Cascade)
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  userProfile  UserProfile @relation(fields: [uuid], references: [uuid], onDelete: Cascade)

  @@index([id])
}

model WhiteListedEmail {
  email String @unique
}

model Brand {
  name           String          @unique
  commission     Float
  affiliateLinks AffiliateLink[]
}

model Collection {
  id                 Int             @id @default(autoincrement())
  userName           String
  uuid               String
  title              String
  active             Boolean         @default(true)
  description        String?
  affiliateLinkOrder Int[]           @default([])
  affiliateLinks     AffiliateLink[]
  userProfile        UserProfile     @relation(fields: [userName, uuid], references: [userName, uuid], onDelete: Cascade)
}

enum SocialMediaType {
  TIKTOK
  INSTAGRAM
}
